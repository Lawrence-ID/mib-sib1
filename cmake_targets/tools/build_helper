if [ ! -f /etc/os-release ]; then
  echo "No /etc/os-release file found. You're likely on an unsupported distro."
  exit -1
fi
OS_DISTRO=$(grep "^ID=" /etc/os-release | sed "s/ID=//" | sed "s/\"//g")
OS_RELEASE=$(grep "^VERSION_ID=" /etc/os-release | sed "s/VERSION_ID=//" | sed "s/\"//g")
case "$OS_DISTRO" in
  fedora) OS_BASEDISTRO="fedora"; INSTALLER="dnf"; CMAKE="cmake" ;;
  rhel)   OS_BASEDISTRO="fedora"; INSTALLER="yum --skip-broken"; CMAKE="cmake3" ;;
  centos) OS_BASEDISTRO="fedora"; INSTALLER="yum --skip-broken"; CMAKE="cmake3" ;;
  debian) OS_BASEDISTRO="debian"; INSTALLER="apt-get"; CMAKE="cmake" ;;
  ubuntu) OS_BASEDISTRO="debian"; INSTALLER="apt-get"; CMAKE="cmake" ;;
esac



###############################
## echo and  family
###############################
black='\E[30m'
red='\E[31m'
green='\E[32m'
yellow='\E[33m'
blue='\E[1;34m'
magenta='\E[35m'
cyan='\E[36m'
white='\E[37m'
reset_color='\E[00m'
COLORIZE=1

cecho()  {
    # Color-echo
    # arg1 = message
    # arg2 = color
    local default_msg="No Message."
    message=${1:-$default_msg}
    color=${2:-$green}
    [ "$COLORIZE" = "1" ] && message="$color$message$reset_color"
    echo -e "$message"
    return
}

echo_error()   { cecho "$*" $red          ;}
echo_fatal()   { cecho "$*" $red; exit -1 ;}
echo_warning() { cecho "$*" $yellow       ;}
echo_success() { cecho "$*" $green        ;}
echo_info()    { cecho "$*" $blue         ;}

##################
# Error handlers #
##################

handler_EXIT() {
	local exit_code=$?
    [ "$exit_code" -eq 0 ] || echo_error "build have failed"
	exit $exit_code
}

trap handler_EXIT EXIT

###########################
# Cleaners
###########################

clean_kernel() {
    $SUDO modprobe ip_tables
    $SUDO modprobe x_tables
    $SUDO iptables -P INPUT ACCEPT
    $SUDO iptables -F INPUT
    $SUDO iptables -P OUTPUT ACCEPT
    $SUDO iptables -F OUTPUT
    $SUDO iptables -P FORWARD ACCEPT
    $SUDO iptables -F FORWARD
    $SUDO iptables -t nat -F
    $SUDO iptables -t mangle -F
    $SUDO iptables -t filter -F
    $SUDO iptables -t raw -F
    echo_info "Flushed iptables"
    $SUDO rmmod nasmesh > /dev/null 2>&1
    $SUDO rmmod oai_nw_drv  > /dev/null 2>&1
    $SUDO rmmod openair_rf > /dev/null 2>&1
    $SUDO rmmod ue_ip > /dev/null 2>&1
    echo_info "removed drivers from kernel"
}

clean_all_files() {
 set_openair_env
 dir=$OPENAIR_DIR/cmake_targets
 rm -rf $dir/log $OPENAIR_DIR/targets/bin/*
 rm -rf $dir/ran_build $dir/ran_build_noLOG
 rm -rf $dir/lte-simulators/build 
 rm -rf $dir/phy_simulators/build $dir/nas_sim_tools/build 
 rm -rf $dir/oaisim_build_oai/build $dir/oaisim_build_oai/CMakeLists.txt
 rm -rf $dir/autotests/bin $dir/autotests/log $dir/autotests/*/build
}

###################################
# Compilers
###################################

#check_warnings:
#    print error message if the compilation had warnings
#argument:
#    $1: log file
check_warnings() {
  #we look for 'warning:' in the compilation log file
  #this is how gcc starts a warning
  #this is not perfect, we may get false positive
  warning_count=`grep "warning:" "$1" | egrep -v "jobserver unavailable|disabling jobserver mode" | wc -l`
  if [ $warning_count -gt 0 ]; then
    echo_error "WARNING: $warning_count warnings. See $1"
  fi
}

#check_errors:
#    print error message if the compilation had errors
#argument:
#    $1: log file
check_errors() {
  #we look for 'warning:' in the compilation log file
  error_count=`grep "error:" "$1" | wc -l`
  if [ $error_count -gt 0 ]; then
    echo_error "ERROR: $error_count error. See $1"
  fi
}

compilations() {
  cd $OPENAIR_DIR/cmake_targets/$1/build
  echo_info "Log file for compilation is being written to: $dlog/$2.$REL.txt"
  set +e
  {
    if [ "$BUILD_COVERITY_SCAN" == "1" ]; then
        COV_SCAN_PREFIX="cov-build --dir cov-int"
    else
        COV_SCAN_PREFIX=""
    fi
    if [ "$MAKE_CMD" != "" ]; then
       $MAKE_CMD $2
    else 
    if [ "$VERBOSE_COMPILE" == "1" ]; then
       $COV_SCAN_PREFIX make -j`nproc` $2 VERBOSE=$VERBOSE_COMPILE
    else
       $COV_SCAN_PREFIX make -j`nproc` $2
    fi
    fi
    ret=$?
  } > $dlog/$2.$REL.txt 2>&1
  set -e
  if [ "$VERBOSE_CI" == "1" ]; then
     echo_info "====== Start of log for $2.$REL.txt ======"
     cat $dlog/$2.$REL.txt
     echo_info "====== End of log for $2.$REL.txt ======"
  fi
  if [[ $ret -ne 0 ]]; then
     check_warnings "$dlog/$2.$REL.txt"
     check_errors "$dlog/$2.$REL.txt"
     echo_error "$2 compilation failed"
     exit 1
  fi
  if [ -s $3 ] ; then
     cp $3 $4
     echo_success "$2 compiled"
     check_warnings "$dlog/$2.$REL.txt"
  else
     check_warnings "$dlog/$2.$REL.txt"
     check_errors "$dlog/$2.$REL.txt"
     echo_error "$2 compilation failed"
     exit 1
  fi
}


################################
# set_openair_env
###############################
set_openair_env(){
    fullpath=`readlink -f $BASH_SOURCE`
    [ -f "/.$fullpath" ] || fullpath=`readlink -f $PWD/$fullpath`
    openair_path=${fullpath%/cmake_targets/*}
    openair_path=${openair_path%/targets/*}
    openair_path=${openair_path%/openair[123]/*}
    export OPENAIR_DIR=$openair_path
    export OPENAIR1_DIR=$openair_path/openair1
    export OPENAIR2_DIR=$openair_path/openair2
    export OPENAIR3_DIR=$openair_path/openair3
    export OPENAIR_TARGETS=$openair_path/targets
}

################################
# Function to killall the subprocesses when Ctrl-C Key is hit
###############################
function handle_ctrl_c(){
CURPID=$$
ppid=$$
arraycounter=1
echo_info "** Trapped CTRL-C. Killing all subprocesses now..."
echo_info "** Calling sync now..."
sync
while true
do
        FORLOOP=FALSE
        # Get all the child process id
        for i in `ps -ef| awk '$3 == '$ppid' { print $2 }'`
        do
                if [ $i -ne $CURPID ] ; then
                        procid[$arraycounter]=$i
                        arraycounter=`expr $arraycounter + 1`
                        ppid=$i
                        FORLOOP=TRUE
                fi
        done
        if [ "$FORLOOP" = "FALSE" ] ; then
           arraycounter=`expr $arraycounter - 1`
           ## We want to kill child process id first and then parent id's
           while [ $arraycounter -ne 0 ]
           do
             echo "first we send ctrl-c to program"
             $SUDO kill -INT "${procid[$arraycounter]}"
             sleep 5
             echo "Now we force kill if that didn't work"
             $SUDO kill -9 "${procid[$arraycounter]}" >/dev/null
             arraycounter=`expr $arraycounter - 1`
           done
         exit
        fi
done
}

