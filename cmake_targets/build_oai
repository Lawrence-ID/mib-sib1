#!/bin/bash
#/*
# * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# * contributor license agreements.  See the NOTICE file distributed with
# * this work for additional information regarding copyright ownership.
# * The OpenAirInterface Software Alliance licenses this file to You under
# * the OAI Public License, Version 1.1  (the "License"); you may not use this file
# * except in compliance with the License.
# * You may obtain a copy of the License at
# *
# *      http://www.openairinterface.org/?page_id=698
# *
# * Unless required by applicable law or agreed to in writing, software
# * distributed under the License is distributed on an "AS IS" BASIS,
# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# * See the License for the specific language governing permissions and
# * limitations under the License.
# *-------------------------------------------------------------------------------
# * For more information about the OpenAirInterface (OAI) Software Alliance:
# *      contact@openairinterface.org
# */

# file build_oai
# brief OAI automated build tool that can be used to install, compile, run OAI.
# author  Navid Nikaein, Lionel GAUTHIER, Laurent Thomas

set -e

# Include helper functions
ORIGIN_PATH=$PWD
THIS_SCRIPT_PATH=$(dirname $(readlink -f $0))
source $THIS_SCRIPT_PATH/tools/build_helper
#CMAKE="cmake"
# Set environment variables (OPENAIR_HOME, ...)
set_openair_env

# Variables for UE data generation
gen_nvram_path=$OPENAIR_DIR/targets/bin
conf_nvram_path=$OPENAIR_DIR/openair3/NAS/TOOLS/ue_eurecom_test_sfr.conf

MSC_GEN=0
XFORMS="True"
SKIP_SHARED_LIB_FLAG="False"
UE_EXPANSION="False"
PRINT_STATS="False"
VCD_TIMING="False"
DEADLINE_SCHEDULER_FLAG_USER=""
CPU_AFFINITY_FLAG_USER="False" #Only valid when low-latency flag is set to False
REL="Rel15"
HW="None"
TP="Ethernet"
EPC=0
VERBOSE_CI=0
VERBOSE_COMPILE=0
CFLAGS_PROCESSOR_USER=""
RUN_GROUP=0
TEST_CASE_GROUP=""
BUILD_DOXYGEN=0
BUILD_COVERITY_SCAN=0
T_TRACER="false"
DISABLE_HARDWARE_DEPENDENCY="False"
CMAKE_BUILD_TYPE=""
CMAKE_CMD="$CMAKE"
UE_AUTOTEST_TRACE="False"
UE_DEBUG_TRACE="False"
UE_TIMING_TRACE="False"
USRP_REC_PLAY="False"
BUILD_ECLIPSE=0
NR="False"
ITTI_SIM="False"
SANITIZE_ADDRESS="False"
OPTIONAL_LIBRARIES="telnetsrv enbscope uescope nrscope msc"
RU=0
trap handle_ctrl_c INT

function print_help() {
  echo_info "
This program installs OpenAirInterface Software
You should have ubuntu 16.xx or 18.04 updated
Options
-c | --clean
   Erase all files to make a rebuild from start
-C | --clean-all
   Erase all files made by previous compilations, installations
--clean-kernel
   Erase previously installed features in kernel: iptables, drivers, ...
-I | --install-external-packages
   Installs required packages such as LibXML, asn1.1 compiler, freediameter, ...
   This option will require root password
--install-optional-packages
   Install useful but not mandatory packages such as valgrind
-i | --install-system-files
   Install OpenAirInterface required files in Linux system
   This option will require root password
-g | --run-with-gdb <Release | RelWithDebInfo | MinSizeRel | Debug
  specify the build mode used by cmake. defaults to Debug mode if -g is used alone, with no mode parameter
  if -g is not specifies, Release mode is used.
-G | --cmaketrace
   enable cmake debugging messages
--eNB
  Makes the LTE softmodem
--eNBocp
  Makes the OCP LTE softmodem
-gNB
  Makes the NR softmodem
--nrUE
  Makes the NR UE softmodem
--RU
  Makes the OAI RRU (without full stack)
--UE
   Makes the UE specific parts (ue_ip, usim, nvram) from the given configuration file
--UE-conf-nvram [configuration file]
   Specify conf_nvram_path (default \"$conf_nvram_path\")
--UE-gen-nvram [output path]
   Specify gen_nvram_path (default \"$gen_nvram_path\")
--HWLAT
    Makes test program for haw latency tests
-a | --agent
   Enables agent for software-defined control of the eNB
-w | --hardware
   EXMIMO, USRP, BLADERF, LMSSDR, IRIS, YUNSDR, ADRV9371_ZC706, SIMU, None (Default)
   Adds this RF board support (in external packages installation and in compilation)
-P | --phy_simulators
   Makes the unitary tests Layer 1 simulators
-S | --core_simulators
   Makes the core security features unitary simulators
-s | --check
   runs a set of auto-tests based on simulators and several compilation tests
--run-group 
   runs only specified test cases specified here. This flag is only valid with -s
-V | --vcd
   Adds a debgging facility to the binary files: GUI with major internal synchronization events
--verbose-compile
   Shows detailed compilation instructions in makefile
--cflags_processor
   Manually Add CFLAGS of processor if they are not detected correctly by script. Only add these flags if you know your processor supports them. Example flags: -msse3 -msse4.1 -msse4.2 -mavx2
--build-doxygen
   Builds doxygen based documentation.
--build-coverity-scan
   Builds Coverity-Scan objects for upload
--disable-deadline
   Disables deadline scheduler of Linux kernel (>=3.14.x).
--enable-deadline
   Enable deadline scheduler of Linux kernel (>=3.14.x). 
--disable-cpu-affinity
   Disables CPU Affinity between UHD/TX/RX Threads (Valid only when deadline scheduler is disabled). By defaulT, CPU Affinity is enabled when not using deadline scheduler. It is enabled only with >2 CPUs. For eNB, CPU_0-> Device library (UHD), CPU_1->TX Threads, CPU_2...CPU_MAX->Rx Threads. For UE, CPU_0->Device Library(UHD), CPU_1..CPU_MAX -> All the UE threads
--enable-cpu-affinity
--disable-T-Tracer
   Disables the T tracer.
--disable-hardware-dependency
   Disable HW dependency during installation
--ue-autotest-trace
   Enable specific traces for UE autotest framework
--ue-trace
   Enable traces for UE debugging
--ue-timing
   Enable traces for timing
--uhd-images-dir
   Download UHD images in the indicated location
--build-eclipse
   Build eclipse project files.
--build-lib <libraries>
   Build optional shared library, <libraries> can be one or several of $OPTIONAL_LIBRARIES or \"all\"
--usrp-recplay
   Build for I/Q record-playback modes
-k | --skip-shared-libraries
   Skip build for shared libraries to reduce compilation time when building frequently for debugging purposes
--ittiSIM
  Makes the itti simulator
-h | --help
   Print this help

Usage (first build):
 NI/ETTUS B201  + COTS UE : ./build_oai -I -i --eNB -w USRP
Usage (regular):
 Eurecom EXMIMO + OAI ENB : ./build_oai --eNB  
 NI/ETTUS B201  + OAI ENB : ./build_oai --eNB -w USRP"
}


function main() {

  until [ -z "$1" ]
  do
    case "$1" in
       -c | --clean)
            CLEAN=1
            shift;;
       -C | --clean-all)
            CLEAN_ALL=1
            shift;;
       --clean-kernel)
            clean_kernel
            echo_info "Erased iptables config and removed modules from kernel"
            shift;;
       -I | --install-external-packages)
            INSTALL_EXTERNAL=1
            echo_info "Will install external packages"
            shift;;
       --install-optional-packages)
            INSTALL_OPTIONAL=1
            echo_info "Will install optional packages"
            shift;;
       -i | --install-system-files)
            INSTALL_SYSTEM_FILES=1
            echo_info "Will copy OpenAirInterface files in Linux directories"
            shift;;
       -g | --run-with-gdb)
            case "$2" in
                "Release")
                    GDB=0
                    CMAKE_BUILD_TYPE="Release"
                    echo_info "Will Compile without gdb symbols and with compiler optimization"
                    CMAKE_CMD="$CMAKE_CMD -DCMAKE_BUILD_TYPE=Release"
                    shift
                    ;;
                "RelWithDebInfo")
                    GDB=0
                    CMAKE_BUILD_TYPE="RelWithDebInfo"
                    echo_info "Will Compile with gdb symbols"
                    CMAKE_CMD="$CMAKE_CMD -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_EXPORT_COMPILE_COMMANDS=1"
                    shift
                    ;;
                "MinSizeRel")
                    GDB=0
                    CMAKE_BUILD_TYPE="MinSizeRel"
                    echo_info "Will Compile for minimal exec size"
                    CMAKE_CMD="$CMAKE_CMD -DCMAKE_BUILD_TYPE=MinSizeRel"
                    shift
                    ;;
                "Debug" | *)
                    GDB=1
                    CMAKE_BUILD_TYPE="Debug"
                    echo_info "Will Compile with gdb symbols and disable compiler optimization"
                    CMAKE_CMD="$CMAKE_CMD -DCMAKE_BUILD_TYPE=Debug"
                    if [ "$2" == "Debug" ] ; then
                        shift
                    fi
                    ;;
            esac
            shift;;
       -G | --cmaketrace)
            CMAKE_CMD="$CMAKE_CMD --trace-expand"
            shift;;
       --cflags_processor)
            CFLAGS_PROCESSOR_USER=$2
            echo_info "Setting CPU FLAGS from USER to: $CFLAGS_PROCESSOR_USER"
            shift 2;;
       --build-coverity-scan)
            BUILD_COVERITY_SCAN=1
            echo_info "Will build Coverity-Scan objects for upload"
            shift;;
       --disable-deadline)
            DEADLINE_SCHEDULER_FLAG_USER="False"
            echo_info "Disabling the usage of deadline scheduler"
            shift 1;;
       --enable-deadline)
            DEADLINE_SCHEDULER_FLAG_USER="True"
            echo_info "Enabling the usage of deadline scheduler"
            shift 1;;
       --enable-cpu-affinity)
            CPU_AFFINITY_FLAG_USER="True"
            echo_info "Enabling CPU Affinity (only valid when not using deadline scheduler)"
            shift 1;;
       --disable-cpu-affinity)
            CPU_AFFINITY_FLAG_USER="False"
            echo_info "Disabling CPU Affinity (only valid when not using deadline scheduler)"
            shift 1;;
       --disable-T-Tracer)
            T_TRACER="False"
            echo_info "Disabling the T tracer"
            shift 1;;
       --disable-hardware-dependency)
            echo_info "Disabling hardware dependency for compiling software"
            DISABLE_HARDWARE_DEPENDENCY="True"
            shift 1;;
       --ue-autotest-trace)
            UE_AUTOTEST_TRACE="True"
            echo_info "Enabling autotest specific trace for UE"
            shift 1;;
       --ue-trace)
            UE_DEBUG_TRACE="True"
            echo_info "Enabling UE trace for debug"
            shift 1;;
       --ue-timing)
            UE_TIMING_TRACE="True"
            echo_info "Enabling UE timing trace"
            shift 1;;
    --ninja)
        CMAKE_CMD="$CMAKE_CMD -GNinja"
	MAKE_CMD=ninja
	shift;;
    --sanitize-address | -fsanitize=address)
        SANITIZE_ADDRESS=True
        shift;;
        -h | --help)
            print_help
            exit 1;;
	*)
	    #print_help
            echo_fatal "Unknown option $1"
            break;;
   esac
  done


  CMAKE_CMD="$CMAKE_CMD .."
  echo_info "CMAKE_CMD=$CMAKE_CMD"

  #Disable CPU Affinity for deadline scheduler
  if [ "$DEADLINE_SCHEDULER_FLAG_USER" = "True" ] ; then 
     CPU_AFFINITY_FLAG_USER="False"
  fi

  echo_info "Flags for Deadline scheduler: $DEADLINE_SCHEDULER_FLAG_USER"
  echo_info "Flags for CPU Affinity: $CPU_AFFINITY_FLAG_USER"

  #######################################################
  # Setting and printing OAI envs, we should check here #
  #######################################################

  echo_info "2. Setting the OAI PATHS ..."

  cecho "OPENAIR_DIR    = $OPENAIR_DIR" $green

  # for conf files copy in this bash script
  if [ -d /usr/lib/freeDiameter ]; then
    export FREEDIAMETER_PREFIX=/usr
  else
    if [ -d /usr/local/lib/freeDiameter ]; then
      export FREEDIAMETER_PREFIX=/usr/local
    else
      echo_warning "FreeDiameter prefix not found, install freeDiameter if EPC, HSS"
    fi
  fi

  if [ "$CLEAN_ALL" = "1" ] ; then
    clean_all_files
    echo_info "Erased all previously producted files"
  fi

  dbin=$OPENAIR_DIR/cmake_targets/
  dlog=$OPENAIR_DIR/cmake_targets/log
  mkdir -p $dbin $dlog

   
  echo_info "3. building the compilation directives ..."

  DIR=$OPENAIR_DIR/cmake_targets
  build_dir=ran_build

  [ "$CLEAN" = "1" ] && rm -rf $DIR/$build_dir/build
  mkdir -p $DIR/$build_dir/build

 
  # first generate the CMakefile in the right directory
    # softmodem compilation

    cmake_file=$DIR/$build_dir/CMakeLists.txt
    echo "cmake_minimum_required(VERSION 2.8)"                             >  $cmake_file
    echo "project (OpenAirInterface)"                                    >> $cmake_file
    echo "set ( CMAKE_BUILD_TYPE $CMAKE_BUILD_TYPE )"                     >> $cmake_file
    echo "set ( CFLAGS_PROCESSOR_USER \"$CFLAGS_PROCESSOR_USER\" )"       >> $cmake_file
    echo "set ( TRANSP_PRO \"${TP}\")"                                    >> $cmake_file
    echo "set ( PACKAGE_NAME \"${exec}\")"                                >> $cmake_file
    echo "set ( DEADLINE_SCHEDULER \"${DEADLINE_SCHEDULER_FLAG_USER}\" )" >> $cmake_file
    echo "set ( CPU_AFFINITY \"${CPU_AFFINITY_FLAG_USER}\" )"             >> $cmake_file
    echo "set ( T_TRACER $T_TRACER )"                                     >> $cmake_file
    echo "set ( UE_AUTOTEST_TRACE $UE_AUTOTEST_TRACE )"                   >> $cmake_file
    echo "set ( UE_DEBUG_TRACE $UE_DEBUG_TRACE )"                         >> $cmake_file
    echo "set ( UE_TIMING_TRACE $UE_TIMING_TRACE )"                       >> $cmake_file
    echo 'include(${CMAKE_CURRENT_SOURCE_DIR}/../CMakeLists.txt)'         >> $cmake_file
    cd  $DIR/$build_dir/build
    eval $CMAKE_CMD

    execlist=""
    execlist="$execlist nr-uesoftmodem"


    for f in $execlist ; do
      echo_info "Compiling $f..."
      compilations \
        $build_dir $f \
        $f $dbin/$f.$REL
    done
  
}

main "$@"
